"use client";

import { useEffect, useMemo, useRef, useState } from "react";

type SpeciesItem = {
  common_name: string | null;
  scientific_name: string | null;
  image_url?: string | null;
};

export default function SpeciesAutosuggest({
  onSelect,
  placeholder = "e.g. Boston Fern",
  defaultValue = "",
  debounceMs = 250,
}: {
  onSelect: (val: { common: string; scientific: string }) => void;
  placeholder?: string;
  defaultValue?: string;
  debounceMs?: number;
}) {
  const [query, setQuery] = useState(defaultValue);
  const [results, setResults] = useState<SpeciesItem[]>([]);
  const [open, setOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const abortRef = useRef<AbortController | null>(null);

  // simple debounce
  const debouncedQuery = useDebounce(query, debounceMs);

  useEffect(() => {
    if (debouncedQuery.trim().length < 2) {
      setResults([]);
      setOpen(false);
      return;
    }

    setLoading(true);
    abortRef.current?.abort();
    const ctrl = new AbortController();
    abortRef.current = ctrl;

    fetch(`/api/api/species?q=${encodeURIComponent(debouncedQuery)}`, {
      signal: ctrl.signal,
    })
      .then(async (r) => {
        if (!r.ok) throw new Error("search failed");
        return r.json();
      })
      .then((data: SpeciesItem[]) => {
        setResults(data);
        setOpen(true);
      })
      .catch(() => {
        // ignore aborted / errors for now
      })
      .finally(() => setLoading(false));

    return () => ctrl.abort();
  }, [debouncedQuery]);

  return (
    <div className="relative">
      <input
        type="text"
        value={query}
        onChange={(e) => {
          setQuery(e.target.value);
        }}
        placeholder={placeholder}
        className="w-full border rounded px-3 py-2"
        aria-autocomplete="list"
        aria-expanded={open}
        aria-controls="species-suggest"
      />
      {loading && (
        <div className="absolute right-2 top-2 text-xs text-gray-500 select-none">
          â€¦
        </div>
      )}
      {open && results.length > 0 && (
        <ul
          id="species-suggest"
          className="absolute z-10 mt-2 w-full max-h-64 overflow-auto rounded border bg-white shadow"
          role="listbox"
        >
          {results.map((r, i) => {
            const sci = r.scientific_name ?? "";
            const com = r.common_name ?? "";
            return (
              <li
                key={`${sci}-${i}`}
                role="option"
                aria-selected="false"
                className="flex items-center gap-2 px-3 py-2 hover:bg-gray-100 cursor-pointer"
                onClick={() => {
                  const common = com || sci;
                  setQuery(common);
                  onSelect({ common, scientific: sci });
                  setOpen(false);
                }}
              >
                {r.image_url ? (
                  // eslint-disable-next-line @next/next/no-img-element
                  <img
                    src={r.image_url}
                    alt={com || sci}
                    className="h-7 w-7 rounded object-cover"
                  />
                ) : (
                  <div className="h-7 w-7 rounded bg-gray-100" />
                )}
                <div className="min-w-0">
                  <div className="text-sm font-medium truncate">
                    {com || sci}
                  </div>
                  <div className="text-xs text-gray-500 italic truncate">
                    {sci}
                  </div>
                </div>
              </li>
            );
          })}
        </ul>
      )}
    </div>
  );
}

// tiny debounce hook
function useDebounce<T>(value: T, delay = 250) {
  const [debounced, setDebounced] = useState(value);
  useEffect(() => {
    const t = setTimeout(() => setDebounced(value), delay);
    return () => clearTimeout(t);
  }, [value, delay]);
  return debounced;
}
